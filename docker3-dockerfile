 Dokcerfile包含创建镜像所需要的全部指令.基于Dokcerfile中的指令,我们可以使用Docker build命令来创建镜像.通过减少减少镜像和容器的创建过程来简化部署.
 
 语法命令如下:
    instruction argument   --指令不区分大小写,约定使用大写.
   
 1.Dockerfile命令都必须从from命令开始.FROM 命令会指定镜像基于哪个基础镜像创建,接下来的命令也会基于这个基础镜像.FROM可以多次使用.
 
    FROM <image name>
    
 2.设置镜像的作者
    maintainer <author name>
 3.RUN:在shell或exec环境下执行的命令.RUN指令会在新创建的镜像上添加新的层面，接下来提交的结果用在Dockerfile的下一条指令中。语法如下:
    RUN 《command》
 4.ADD：复制文件指令。它有两个参数<source>和<destination>。destination是容器内的路径。source可以是URL或者是启动配置上下文中的一个文件。语法如下：
    ADD 《src》 《destination》
 5.CMD：提供了容器默认的执行命令。 Dockerfile只允许使用一次CMD指令。 使用多个CMD会抵消之前所有的指令，只有最后一个指令生效。 CMD有三种形式:
    CMD ["executable","param1","param2"]
    CMD ["param1","param2"]
    CMD command param1 param2
 6. EXPOSE：指定容器在运行时监听的端口。语法如下：
    EXPOSE <port>;
 7. entrypoint:配置给容器一个可执行的命令，这意味着在每次使用镜像创建容器时一个特定的应用程序可以被设置为默认程序。同时也意味着该镜像每次
      被调用时仅能运行指定的应用。类似于CMD，Docker只允许一个ENTRYPOINT，多个ENTRYPOINT会抵消之前所有的指令，只执行最后的ENTRYPOINT指令。
      语法如下:
      ENTRYPOINT ["executable", "param1","param2"]
      ENTRYPOINT command param1 param2
 8.  WORKDIR：指定RUN、CMD与ENTRYPOINT命令的工作目录。语法如下：
      WORKDIR /path/to/workdir
 9.  USER：镜像正在运行时设置一个UID。语法如下:
 
 10.VOLUME：授权访问从容器内到主机上的目录。语法如下：
      
      VOLUME ["/data"]
